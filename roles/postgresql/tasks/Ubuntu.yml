---
- name: Install postgresql package
  apt:
    name: "{{item}}"
    state: present
    update_cache: yes
  with_items:
    - postgresql
    - python-psycopg2

- name: Copy pg_hba.conf
  copy:
    src: pg_hba.conf
    dest: /etc/postgresql/9.5/main
    mode: 0600

- name: Create user for the db
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{pg_db_user}}"
    password: "{{pg_db_passwd}}"
    state: present

- name: Create database
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{pg_db_name}}"
    owner: "{{pg_db_user}}"
    encoding: UTF-8
    template: template1
    state: present

- name: Check table of services
  become: yes
  become_user: postgres
  command: /usr/bin/psql "{{pg_db_name}}" -c '\d services'
  register: table_check
  failed_when: False
  changed_when: False

- name: Copy eventid.sql
  copy:
    src: eventid.sql
    dest: /tmp/
    mode: 0644
  when: "'service_id' not in table_check.stdout"

- name: Load schema of eventid.sql
  become: yes
  become_user: postgres
  command: /usr/bin/psql "{{pg_db_name}}" -f /tmp/eventid.sql
  when: "'service_id' not in table_check.stdout"

- name: Grant privileges on tables
  become: yes
  become_user: postgres
  postgresql_privs:
    database: eventdb
    role: eventdba
    type: table
    objs: services,instances,components
    privs: SELECT,UPDATE,INSERT,DELETE
    state: present

- name: Grant privileges on sequences
  become: yes
  become_user: postgres
  postgresql_privs:
    database: eventdb
    role: eventdba
    type: sequence
    objs: service_id_seq,instance_id_seq,component_id_seq
    privs: SELECT,UPDATE
    state: present

- name: Cleanup eventid.sql
  file:
    path: /tmp/eventid.sql
    state: absent

- name: Get stats of monitrc
  stat: 
    path: /etc/monit/monitrc
    get_md5: no
    get_checksum: no
  register: st_monitrc

- name: Template of postgres.monit
  template:
    src: postgres.monit.j2
    dest: /etc/monit/conf.d/postgres.monit
    mode: 0644
  vars:
    pidfile: /var/run/postgresql/9.5-main.pid
  when: st_monitrc.stat.exists
  notify: Restart_monit
